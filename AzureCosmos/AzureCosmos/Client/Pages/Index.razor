@page "/"
@using System.Net.Http.Json;
@using AzureCosmos.Shared
@using Newtonsoft.Json

<PageTitle>Index</PageTitle>

<EditForm Model=@family>
    <div class="form-group">
        <label for="Id">Id</label>
        <InputText @bind-Value=family.Id class="form-control" id="Id" />
    </div>

    <div class="form-group">
        <label for="PartitionKey">PartitionKey</label>
        <InputText @bind-Value=family.PartitionKey class="form-control" id="PartitionKey" />
    </div>

    <div class="form-group">
        <label for="LastName">LastName</label>
        <InputText @bind-Value=family.LastName class="form-control" id="LastName" />
    </div>

    <button class="btn btn-primary" @onclick="@( async ()=> await SaveFamilies())">Save</button>
    <button class="btn btn-danger" @onclick="@( ()=> family = new() )">Cancel</button>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>PartitionKey</th>
            <th>LastName</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Family family in families ?? new())
        {
            <tr>
                <td>@family.Id</td>
                <td>@family.PartitionKey</td>
                <td>@family.LastName</td>


                @*    <td><button class="btn btn-primary" @onclick="@( ()=> family = taskFromDB )" style="width:110px;">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@( async ()=> await DeleteTask(taskFromDB.Id) )" style="width:110px;">Delete</button></td>
                *@
            </tr>
        }
    </tbody>
</table>


@code {

    [Inject] public HttpClient? _httpClient { get; set; }

    Family family = new();
    List<Family>? families;

    protected override async Task OnInitializedAsync()
    {
        if (_httpClient is null)
            throw new Exception($"{nameof(_httpClient)} was found null");

        families = await _httpClient.GetFromJsonAsync<List<Family>>("api/families");
    }

    private async Task SaveFamilies()
    {
        if (_httpClient is null)
            throw new Exception($"{nameof(_httpClient)} was found null");

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync<Family>("api/families", family);
        string responseString = await response.Content.ReadAsStringAsync();
        Family? createdFamily = JsonConvert.DeserializeObject<Family>(responseString);
        if (createdFamily is null)
            throw new Exception($"Created Family {nameof(createdFamily)} was found null");

        families?.Add(createdFamily);
        family = new();
        //families = await GetFamilies();
    }

    protected async Task EditFamilies()
    {
        if (_httpClient is null)
            throw new Exception($"{nameof(_httpClient)} was found null");

        HttpResponseMessage response = await _httpClient.PutAsJsonAsync($"api/families", family);
        string responseString = await response.Content.ReadAsStringAsync();
        Family? updatedFamily = JsonConvert.DeserializeObject<Family>(responseString);

        if (updatedFamily is null)
            throw new Exception($"Updated Family {nameof(updatedFamily)} was found null");
        if (families is null)
            throw new Exception($"{nameof(families)} was found null");

        int updatedFamilyIndex = families.IndexOf(updatedFamily);
        families[updatedFamilyIndex] = updatedFamily;
        family = new();
        //families = await GetFamilies();
    }

    protected async Task DeleteTask(Guid? id)
    {
        if (_httpClient is null)
            throw new Exception($"{nameof(_httpClient)} was found null");

        if (id is null || id == Guid.Empty)
            throw new Exception($"{nameof(id)} was found null or empty Guid");

        HttpResponseMessage response = await _httpClient.DeleteAsync($"api/families/{id}");
        string responseString = await response.Content.ReadAsStringAsync();
        Family? deletedFamily = JsonConvert.DeserializeObject<Family>(responseString);
        if (deletedFamily is null)
            throw new Exception($"Deleted Family {nameof(deletedFamily)} was found null");
        if (families is null)
            throw new Exception($"{nameof(families)} was found null");

        int deletedFamilyIndex = families.IndexOf(deletedFamily);
        families.RemoveAt(deletedFamilyIndex);

        //families = await GetFamilies();
    }
}